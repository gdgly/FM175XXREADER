C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE FM175XX
OBJECT MODULE PLACED IN .\Output\fm175xx.obj
COMPILER INVOKED BY: E:\Tools\Keil5\C51\BIN\C51.EXE fm175xx.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Inc) DEBUG OBJECTE
                    -XTEND PRINT(.\List\fm175xx.lst) OBJECT(.\Output\fm175xx.obj)

line level    source

   1          /*************************************************************/
   2          //2014.03.06修改版
   3          /*************************************************************/
   4          #include "spi.h"
   5          #include "main.h"
   6          #include "fm175xx.h"
   7          #include "STC15F2K60S2.h"
   8          #include "pin.h"
   9          #include <string.h>     
  10          #include "uart.h"
  11          
  12           char wde=0;
  13          /*************************************************************/
  14          /*函数名：          Read_Reg
  15          /*功能：            读寄存器操作
  16          /*输入参数：    reg_add，寄存器地址
  17          /*返回值：          寄存器数值
  18          /*************************************************************/
  19          unsigned char Read_Reg(unsigned char reg_add)
  20          {
  21   1      unsigned char data reg_value;      
  22   1       reg_value=SPIRead(reg_add);
  23   1       return reg_value;
  24   1      }
  25          /*************************************************************/
  26          /*函数名：          Read_Reg All
  27          /*功能：            读64个寄存器操作
  28          /*输入参数：    无
  29          /*输出参数              *reg_value，寄存器数值指针
  30          /*返回值：          OK
  31          /*************************************************************/
  32          unsigned char Read_Reg_All(unsigned char *reg_value)
  33          {
  34   1      unsigned char data i;
  35   1              for (i=0;i<64;i++)         
  36   1                      *(reg_value+i)=SPIRead(i);
  37   1       return OK;
  38   1      }
  39          /*************************************************************/
  40          /*函数名：          Write_Reg                                                                    */
  41          /*功能：            写寄存器操作                                                                 */
  42          /*                                                                                                                       */
  43          /*输入参数：    reg_add，寄存器地址；reg_value，寄存器数值       */
  44          /*返回值：          OK                                                                                   */
  45          /*                              ERROR                                                                            */
  46          /*************************************************************/
  47          unsigned char Write_Reg(unsigned char reg_add,unsigned char reg_value)
  48          {
  49   1              SPIWrite(reg_add,reg_value);
  50   1              return OK;
  51   1      }
  52          /*************************************************************/
  53          /*函数名：          Read_FIFO                                                                    */
  54          /*功能：            读取FIFO                                                                     */
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 2   

  55          /*                                                                                                                       */
  56          /*输入参数：    length，读取数据长度                                             */
  57          /*输出参数：    *fifo_data，数据存放指针                                         */
  58          /*返回值：                                                                                               */
  59          /*                                                                                                                       */
  60          /*************************************************************/
  61          void Read_FIFO(unsigned char length,unsigned char *fifo_data)
  62          {        
  63   1              SPIRead_Sequence(length,FIFODataReg,fifo_data);
  64   1              return;
  65   1      }
  66          /*************************************************************/
  67          /*函数名：          Write_FIFO                                                                   */
  68          /*功能：            写入FIFO                                                                     */
  69          /*                                                                                                                       */
  70          /*输入参数：    length，读取数据长度；*fifo_data，数据存放指针*/
  71          /*输出参数：                                                                                             */
  72          /*返回值：                                                                                               */
  73          /*                                                                                                                       */
  74          /*************************************************************/
  75          void Write_FIFO(unsigned char length,unsigned char *fifo_data)
  76          {
  77   1              SPIWrite_Sequence(length,FIFODataReg,fifo_data);
  78   1              return;
  79   1      }
  80          /*************************************************************/
  81          /*函数名：          Clear_FIFO                                                                   */
  82          /*功能：            清空FIFO                                                                     */
  83          /*                                                                                                                       */
  84          /*输入参数：    无                                                                                      */
  85          /*输出参数：                                                                                             */
  86          /*返回值：          OK                                                                                   */
  87          /*                              ERROR                                                                            */
  88          /*************************************************************/
  89          unsigned char Clear_FIFO(void)
  90          {
  91   1               Set_BitMask(FIFOLevelReg,0x80);//清除FIFO缓冲
  92   1               if (SPIRead(FIFOLevelReg)==0)
  93   1                      return OK;
  94   1              else
  95   1                      return ERROR;
  96   1      }
  97          /*************************************************************/
  98          /*函数名：          Set_BitMask                                                                  */
  99          /*功能：            置位寄存器操作                                                               */
 100          /*输入参数：    reg_add，寄存器地址；mask，寄存器置位            */
 101          /*返回值：          OK                                                                                   */
 102          /*                              ERROR                                                                            */
 103          /*************************************************************/
 104          unsigned char Set_BitMask(unsigned char reg_add,unsigned char mask)
 105          {
 106   1          unsigned char data result;
 107   1          result=Write_Reg(reg_add,Read_Reg(reg_add) | mask);  // set bit mask
 108   1              return result;
 109   1      }
 110          /*********************************************/
 111          /*函数名：          Clear_BitMask
 112          /*功能：            清除位寄存器操作
 113                                          
 114          /*输入参数：    reg_add，寄存器地址；mask，寄存器清除位
 115          /*返回值：          OK
 116                                          ERROR
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 3   

 117          /*********************************************/
 118          unsigned char Clear_BitMask(unsigned char reg_add,unsigned char mask)
 119          {
 120   1          unsigned char data result;
 121   1          result=Write_Reg(reg_add,Read_Reg(reg_add) & ~mask);  // clear bit mask
 122   1              return result;
 123   1      }
 124          /*********************************************/
 125          /*函数名：          Set_RF
 126          /*功能：            设置射频输出
 127                                          
 128          /*输入参数：    mode，射频输出模式
 129                                          0，关闭输出
 130                                          3，TX1，TX2打开输出，TX2为反向输出
 131          /*返回值：          OK
 132                                          ERROR
 133          /*********************************************/
 134          
 135          unsigned char Set_Rf(unsigned char mode)
 136          {
 137   1      unsigned char data result;
 138   1      if      ((Read_Reg(TxControlReg)&0x03)==mode)
 139   1              return OK;
 140   1      if (mode==0)
 141   1              {
 142   2              result=Clear_BitMask(TxControlReg,0x03); //关闭TX1，TX2输出
 143   2              }
 144   1      if (mode==1)
 145   1              {
 146   2              result=Set_BitMask(TxControlReg,0x01); //仅打开TX1输出
 147   2              result=Clear_BitMask(TxControlReg,0x02);
 148   2              }
 149   1      if (mode==2)
 150   1              {
 151   2              result=Clear_BitMask(TxControlReg,0x01);
 152   2              result=Set_BitMask(TxControlReg,0x02); //仅打开TX2输出
 153   2              }
 154   1      if (mode==3)
 155   1              {
 156   2              result=Set_BitMask(TxControlReg,0x03); //打开TX1，TX2输出
 157   2              }
 158   1          Delay_100us(1000);
 159   1      return result;
 160   1      }
 161          /*********************************************/
 162          /*函数名：          Pcd_Comm
 163          /*功能：            读卡器通信
 164                                          
 165          /*输入参数：    Command，通信操作命令；
 166                                          pInData，发送数据数组；
 167                                          InLenByte，发送数据数组字节长度；
 168                                          pOutData，接收数据数组；
 169                                          pOutLenBit，接收数据的位长度
 170          /*返回值：          OK
 171                                          ERROR
 172          /*********************************************/  
 173          unsigned char Pcd_Comm( unsigned char Command, 
 174                                          unsigned char *pInData, 
 175                                          unsigned char InLenByte,
 176                                          unsigned char *pOutData, 
 177                                          unsigned int *pOutLenBit)
 178          {
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 4   

 179   1              unsigned char data result;
 180   1              unsigned char data rx_temp=0;//临时数据字节长度
 181   1              unsigned char data rx_len=0;//接收数据字节长度
 182   1              unsigned char data lastBits=0;//接收数据位长度
 183   1              unsigned char data irq;
 184   1              
 185   1        Debug_Send_char1('\\');
 186   1        Debug_Send_char1(Command);
 187   1        
 188   1              Clear_FIFO();
 189   1              Write_Reg(CommandReg,Idle);
 190   1              Write_Reg(WaterLevelReg,0x20);//设置FIFOLevel=32字节
 191   1              Write_Reg(ComIrqReg,0x7F);//清除IRQ标志
 192   1      
 193   1              if(Command==MFAuthent)
 194   1              {
 195   2                      Write_FIFO(InLenByte,pInData);//填入认证密钥
 196   2                      Set_BitMask(BitFramingReg,0x80);//启动发送
 197   2              }
 198   1              Set_BitMask(TModeReg,0x80);//自动启动定时器
 199   1              Write_Reg(CommandReg,Command);
 200   1        
 201   1        Debug_Send_char1('\\');
 202   1        Debug_Send_char1(Command); 
 203   1         
 204   1              while(1)//循环判断中断标识
 205   1              {
 206   2          Debug_Send_char1('0');
 207   2                      irq = Read_Reg(ComIrqReg);//查询中断标志
 208   2          Debug_Send_char1(irq);
 209   2                      if(irq&0x01)            //TimerIRq  定时器时间用尽
 210   2                      {
 211   3                              result=ERROR;
 212   3            Debug_Send_char1('3');
 213   3          Debug_Send_char1(Command);
 214   3                      
 215   3                              break;
 216   3                      }
 217   2                      if(Command==MFAuthent)
 218   2                      {
 219   3                              if(irq&0x10)    //IdelIRq  command寄存器为空闲，指令操作完成
 220   3                              {
 221   4                                      result=OK;
 222   4                                      break;
 223   4                              }
 224   3                      }
 225   2                      if(Command==Transmit)
 226   2                      {
 227   3                                              if((irq&0x04)&&(InLenByte>0))//LoAlertIrq+发送字节数大于0
 228   3                                                      {
 229   4                                                              if (InLenByte<32)
 230   4                                                                      {
 231   5                                                                              Write_FIFO(InLenByte,pInData);  
 232   5                                                                              InLenByte=0;
 233   5                                                                      }
 234   4                                                                      else
 235   4                                                                      {
 236   5                                                                              Write_FIFO(32,pInData);
 237   5                                                                              InLenByte=InLenByte-32;
 238   5                                                                              pInData=pInData+32;
 239   5                                                                      }
 240   4                                                              Write_Reg(ComIrqReg,0x04);//清除LoAlertIrq
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 5   

 241   4                                                              Set_BitMask(BitFramingReg,0x80);//启动发送
 242   4                                                      
 243   4                                                      }       
 244   3                                              
 245   3                                              if((irq&0x40)&&(InLenByte==0))          //TxIRq
 246   3                                              {
 247   4                                                      result=OK;
 248   4                                                      break;
 249   4                                              }
 250   3                                      }
 251   2                                                                
 252   2                              if(Command==Transceive)
 253   2                                      {
 254   3                                              if((irq&0x04)&&(InLenByte>0))//LoAlertIrq+发送字节数大于0
 255   3                                              {       
 256   4                                                      if (InLenByte>32)
 257   4                                                              {
 258   5                                                                      Write_FIFO(32,pInData);
 259   5                                                                      InLenByte=InLenByte-32;
 260   5                                                                      pInData=pInData+32;
 261   5                                                              }
 262   4                                                      else
 263   4                                                              {
 264   5                                                                      Write_FIFO(InLenByte,pInData);
 265   5                                                                      InLenByte=0;
 266   5                                                              }
 267   4                                                      Set_BitMask(BitFramingReg,0x80);//启动发送
 268   4                                                      Write_Reg(ComIrqReg,0x04);//清除LoAlertIrq
 269   4                                              }
 270   3                                              if(irq&0x08)    //HiAlertIRq
 271   3                                              {
 272   4                                                       if((irq&0x40)&&(InLenByte==0)&&(Read_Reg(FIFOLevelReg)>32))//TxIRq    原有
 273   4                                              
 274   4                                                              {
 275   5                                                                      Read_FIFO(32,pOutData+rx_len); //读出FIFO内容
 276   5                                                                      rx_len=rx_len+32;
 277   5                                                                      Write_Reg(ComIrqReg,0x08);      //清除 HiAlertIRq
 278   5                                                              }
 279   4                                                      }
 280   3                                          if((irq&0x20)&&(InLenByte==0))      //RxIRq=1
 281   3                                                      {       wde=1;
 282   4                                                              result=OK;
 283   4                                                              break;
 284   4                                                      }
 285   3                                          }
 286   2                                      }
 287   1              Debug_Send_char1('2');
 288   1      //    if (Read_Reg(ErrorReg)&0x0F)
 289   1      //        {
 290   1      //                      result = ERROR;
 291   1      //        }
 292   1      //        else
 293   1      
 294   1                  {   
 295   2                               if (Command == Transceive)
 296   2                                      {
 297   3              Debug_Send_char1('4');
 298   3              rx_len=0;//
 299   3                                              rx_temp=Read_Reg(FIFOLevelReg);
 300   3                                              Debug_Send_char1('5');
 301   3                Debug_Send_char1(rx_temp);
 302   3                Read_FIFO(rx_temp,pOutData+rx_len); //读出FIFO内容
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 6   

 303   3                Debug_Send_char1('6');
 304   3                                              rx_len=rx_len+rx_temp;//接收长度累加
 305   3                      
 306   3                              lastBits = Read_Reg(ControlReg) & 0x07;
 307   3                      if (lastBits)
 308   3                              *pOutLenBit = (rx_len-1)*(unsigned int)8 + lastBits;  
 309   3                                  else
 310   3                              *pOutLenBit = rx_len*(unsigned int)8;   
 311   3                                      }
 312   2                      }
 313   1          Debug_Send_char1('1');
 314   1          Set_BitMask(ControlReg,0x80);           // stop timer now
 315   1          Write_Reg(CommandReg,Idle); 
 316   1              Clear_BitMask(BitFramingReg,0x80);//关闭发送
 317   1              return result;
 318   1      }
 319          /*********************************************/
 320          /*函数名：          Pcd_SetTimer
 321          /*功能：            设置接收延时
 322          /*输入参数：    delaytime，延时时间（单位为毫秒）
 323          /*返回值：          OK
 324          /*********************************************/
 325           unsigned char Pcd_SetTimer(unsigned long delaytime)//设定超时时间（ms）
 326          {
 327   1              unsigned long data TimeReload;
 328   1              unsigned int data Prescaler;
 329   1      
 330   1              Prescaler=0;
 331   1              TimeReload=0;
 332   1              while(Prescaler<0xfff)
 333   1              {
 334   2                      TimeReload = ((delaytime*(long)13560)-1)/(Prescaler*2+1);
 335   2                      
 336   2                      if( TimeReload<0xffff)
 337   2                              break;
 338   2                      Prescaler++;
 339   2              }
 340   1                      TimeReload=TimeReload&0xFFFF;
 341   1                      Set_BitMask(TModeReg,Prescaler>>8);
 342   1                      Write_Reg(TPrescalerReg,Prescaler&0xFF);                                        
 343   1                      Write_Reg(TReloadMSBReg,TimeReload>>8);
 344   1                      Write_Reg(TReloadLSBReg,TimeReload&0xFF);
 345   1              return OK;
 346   1      }
 347          /*********************************************/
 348          /*函数名：          Pcd_ConfigISOType
 349          /*功能：            设置操作协议
 350          /*输入参数：    type 0，ISO14443A协议；
 351          /*                                       1，ISO14443B协议；
 352          /*返回值：          OK
 353          /*********************************************/
 354          unsigned char Pcd_ConfigISOType(unsigned char type)
 355          {
 356   1              
 357   1         if (type == 0)                     //ISO14443_A
 358   1         { 
 359   2                      Set_BitMask(ControlReg, 0x10); //ControlReg 0x0C 设置reader模式
 360   2                      Set_BitMask(TxAutoReg, 0x40); //TxASKReg 0x15 设置100%ASK有效
 361   2                  Write_Reg(TxModeReg, 0x00);  //TxModeReg 0x12 设置TX CRC无效，TX FRAMING =TYPE A
 362   2                  Write_Reg(RxModeReg, 0x00); //RxModeReg 0x13 设置RX CRC无效，RX FRAMING =TYPE A
 363   2         }
 364   1         if (type == 1)                     //ISO14443_B
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 7   

 365   1              { 
 366   2                      Write_Reg(ControlReg, 0x10); //ControlReg 0x0C 设置reader模式
 367   2                  Write_Reg(TxModeReg, 0x83); //TxModeReg 0x12 设置TX CRC有效，TX FRAMING =TYPE B
 368   2                      Write_Reg(RxModeReg, 0x83); //RxModeReg 0x13 设置RX CRC有效，RX FRAMING =TYPE B
 369   2              Write_Reg(GsNReg, 0xF4); //GsNReg 0x27 设置ON电导
 370   2              Write_Reg(GsNOffReg, 0xF4); //GsNOffReg 0x23 设置OFF电导
 371   2              Write_Reg(TxAutoReg, 0x00);// TxASKReg 0x15 设置100%ASK无效
 372   2              }
 373   1         if (type == 2)                     //Felica
 374   1              { 
 375   2                      Write_Reg(ControlReg, 0x10); //ControlReg 0x0C 设置reader模式
 376   2                  Write_Reg(TxModeReg, 0x92); //TxModeReg 0x12 设置TX CRC有效，212kbps,TX FRAMING =Felica
 377   2                      Write_Reg(RxModeReg, 0x96); //RxModeReg 0x13 设置RX CRC有效，212kbps,Rx Multiple Enable,RX FRAMING =Feli
             -ca
 378   2              Write_Reg(GsNReg, 0xF4); //GsNReg 0x27 设置ON电导
 379   2                      Write_Reg(CWGsPReg, 0x20); //
 380   2                      Write_Reg(GsNOffReg, 0x4F); //GsNOffReg 0x23 设置OFF电导
 381   2                      Write_Reg(ModGsPReg, 0x20); 
 382   2              Write_Reg(TxAutoReg, 0x07);// TxASKReg 0x15 设置100%ASK无效
 383   2              }
 384   1      
 385   1         return OK;
 386   1      }
 387          /*********************************************/
 388          /*函数名：          FM175X_SoftReset
 389          /*功能：            软复位操作
 390                                          
 391          /*输入参数：    
 392                                          
 393          
 394          /*返回值：          OK
 395                                          ERROR
 396          /*********************************************/
 397          
 398          unsigned char  FM175X_SoftReset(void)
 399            {     
 400   1              Write_Reg(CommandReg,SoftReset);//
 401   1              Set_BitMask(ControlReg,0x10);//17520配置为READER
 402   1              if (Read_Reg(ControlReg)&0x10)
 403   1                      return OK;
 404   1              else
 405   1                      return  ERROR;
 406   1        }
 407          
 408          unsigned char FM175X_HardReset(void)
 409            {     
 410   1              NPD=0;
 411   1              Delay_100us(1);
 412   1              NPD=1;
 413   1              Delay_100us(1);
 414   1              return OK;
 415   1        }
 416          /*********************************************/
 417          /*函数名：          FM175X_SoftPowerdown
 418          /*功能：            软件低功耗操作
 419          /*输入参数：    
 420          /*返回值：          OK，进入低功耗模式；
 421          /*                              ERROR，退出低功耗模式；
 422          /*********************************************/
 423          unsigned char FM175X_SoftPowerdown(void)
 424          {
 425   1              if (Read_Reg(CommandReg)&0x10)
C51 COMPILER V9.54   FM175XX                                                               03/17/2019 17:55:25 PAGE 8   

 426   1                      {
 427   2                      Clear_BitMask(CommandReg,0x10);//退出低功耗模式
 428   2                      return ERROR;
 429   2                      }
 430   1              else
 431   1                      Set_BitMask(CommandReg,0x10);//进入低功耗模式
 432   1                      return OK;
 433   1      }
 434          /*********************************************/
 435          /*函数名：          FM175X_HardPowerdown
 436          /*功能：            硬件低功耗操作
 437          /*输入参数：    
 438          /*返回值：          OK，进入低功耗模式；
 439          /*                              ERROR，退出低功耗模式；
 440          /*********************************************/
 441          unsigned char FM175X_HardPowerdown(void)
 442          {       
 443   1              NPD=~NPD;
 444   1              if(NPD==1)
 445   1                      return OK; //进入低功耗模式
 446   1              else
 447   1                      return ERROR;//退出低功耗模式
 448   1      }
 449          /*********************************************/
 450          /*函数名：          Read_Ext_Reg
 451          /*功能：            读取扩展寄存器
 452          /*输入参数：    reg_add，寄存器地址
 453          /*返回值：          寄存器数值
 454          /*********************************************/
 455          unsigned char Read_Ext_Reg(unsigned char reg_add)
 456          {
 457   1              Write_Reg(0x0F,0x80+reg_add);
 458   1              return Read_Reg(0x0F);
 459   1      }
 460          /*********************************************/
 461          /*函数名：          Write_Ext_Reg
 462          /*功能：            写入扩展寄存器
 463          /*输入参数：    reg_add，寄存器地址；reg_value，寄存器数值
 464          /*返回值：          OK
 465                                          ERROR
 466          /*********************************************/
 467          unsigned char Write_Ext_Reg(unsigned char reg_add,unsigned char reg_value)
 468          {
 469   1              Write_Reg(0x0F,0x40+reg_add);
 470   1              Write_Reg(0x0F,0xC0+reg_value);
 471   1              return OK; 
 472   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1352    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
